name: React Native CI/CD

on:
  push:
    branches: [main, test-build]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  pull_request:
    branches: [main, test-build]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev
          - prod-apk
          - all

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  test:
    needs: check-skip
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules (delivra)
        uses: actions/cache@v4
        with:
          path: delivra/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('delivra/package-lock.json', 'delivra/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (bun or npm)
        working-directory: delivra
        run: |
          set -euo pipefail
          if [ -f bun.lockb ]; then
            echo "bun.lockb found — using bun"
            if ! command -v bun >/dev/null 2>&1; then
              echo "Installing bun"
              curl -fsSL https://bun.sh/install | bash || true
              export PATH="$HOME/.bun/bin:$PATH"
            fi
            if command -v bun >/dev/null 2>&1; then
              bun install || npm install --legacy-peer-deps
            else
              echo "bun not available, falling back to npm"
              npm ci --legacy-peer-deps || npm install --legacy-peer-deps || true
            fi
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Using npm ci because a package-lock exists"
            npm ci --legacy-peer-deps
          else
            echo "No lockfile found — running npm install (best effort)"
            npm install --legacy-peer-deps
          fi

      - name: 🧪 Run TypeScript check
        working-directory: delivra
        run: npx tsc --noEmit

      - name: 🧹 Run ESLint
        working-directory: delivra
        run: npm run lint

      - name: 🎨 Run Prettier check
        working-directory: delivra
        run: npm run format:check

  build-and-deploy:
    needs: test
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache node modules (delivra)
        uses: actions/cache@v4
        with:
          path: delivra/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('delivra/package-lock.json', 'delivra/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install node dependencies (bun or npm)
        working-directory: delivra
        run: |
          set -euo pipefail
          if [ -f bun.lockb ]; then
            echo "bun.lockb found — using bun"
            if ! command -v bun >/dev/null 2>&1; then
              echo "Installing bun"
              curl -fsSL https://bun.sh/install | bash || true
              export PATH="$HOME/.bun/bin:$PATH"
            fi
            if command -v bun >/dev/null 2>&1; then
              bun install || npm install --legacy-peer-deps
            else
              echo "bun not available, falling back to npm"
              npm ci --legacy-peer-deps || npm install --legacy-peer-deps || true
            fi
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Using npm ci because a package-lock exists"
            npm ci --legacy-peer-deps
          else
            echo "No lockfile found — running npm install (best effort)"
            npm install --legacy-peer-deps
          fi

      - name: Install EAS CLI
        run: |
          npm install -g eas-cli@latest

      - name: Make gradlew executable
        run: chmod +x delivra/android/gradlew

      - name: 📱 Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: 🔄 Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: 📋 Fix package.json main entry
        run: |
          # Check if jq is installed, if not install it
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Fix the main entry in package.json
          if [ -f ./package.json ]; then
            # Create a backup
            cp package.json package.json.bak
            # Update the package.json
            jq '.main = "node_modules/expo/AppEntry.js"' package.json > package.json.tmp && mv package.json.tmp package.json
            echo "Updated package.json main entry"
            cat package.json | grep "main"
          else
            echo "package.json not found"
            exit 1
          fi

      - name: 📋 Update metro.config.js for SVG support
        run: |
          if [ -f ./metro.config.js ]; then
            echo "Creating backup of metro.config.js"
            cp ./metro.config.js ./metro.config.js.backup
            echo "Updating metro.config.js to CommonJS format"
            cat > ./metro.config.js << 'EOFMARKER'
          /* eslint-disable @typescript-eslint/no-var-requires */
          const { getDefaultConfig } = require('expo/metro-config');

          const config = getDefaultConfig(__dirname);

          const { transformer, resolver } = config;

          config.transformer = {
            ...transformer,
            babelTransformerPath: require.resolve('react-native-svg-transformer/expo'),
          };

          config.resolver = {
            ...resolver,
            assetExts: resolver.assetExts.filter(ext => ext !== 'svg'),
            sourceExts: [...resolver.sourceExts, 'svg'],
          };

          module.exports = config;
          EOFMARKER
            echo "metro.config.js updated to CommonJS format"
          else
            echo "metro.config.js not found"
          fi

      - name: 📦 Run expo prebuild (ensure native folders)
        run: |
          if [ -f delivra/package.json ]; then
            echo "Running expo prebuild in delivra"
            cd delivra
            npx expo prebuild || true
            cd ..
          else
            echo "delivra/package.json not found, skipping prebuild"
          fi

      - name: 📱 Build Development APK
        if: github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'dev' || github.event_name == 'push'
        run: |
          # Build with increased memory limit
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile development --local --non-interactive --output=./app-dev.apk
        env:
          NODE_ENV: development

      - name: 📱 Build Production APK
        if: github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'prod-apk' || github.event_name == 'push'
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile production-apk --local --non-interactive --output=./app-prod.apk
        env:
          NODE_ENV: production

      - name: 📦 Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-dev.apk
            ./app-prod.apk
          retention-days: 7
