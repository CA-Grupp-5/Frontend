name: 'Setup  JDK + GRADLE + Generate APK'
description: 'Setup  JDK + GRADLE + Generate APK'
inputs:
  APP_ENV:
    description: 'APP_ENV (one of): development, staging, production'
    required: true
    default: 'staging'

runs:
  using: 'composite'
  steps:
    - name: Set Up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '17'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install deps & prebuild (npm or bun)
      shell: bash
      run: |
        set -euo pipefail
        WORKDIR="$GITHUB_WORKSPACE/delivra"
        if [ -d "$WORKDIR" ]; then
          cd "$WORKDIR"
        else
          echo "delivra folder not found at $WORKDIR"; exit 0
        fi

        # Prefer bun if a bun.lockb exists
        if [ -f bun.lockb ]; then
          echo "bun.lockb found — using bun"
          if ! command -v bun >/dev/null 2>&1; then
            echo "Installing bun"
            curl -fsSL https://bun.sh/install | bash || true
            export PATH="$HOME/.bun/bin:$PATH"
          fi
          if command -v bun >/dev/null 2>&1; then
            bun install || npm install
            bun run prebuild:${{ inputs.APP_ENV }} || npm run prebuild:${{ inputs.APP_ENV }} || true
          else
            echo "bun not available, falling back to npm"
            npm ci || npm install || true
            npm run prebuild:${{ inputs.APP_ENV }} || true
          fi
        elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
          echo "Using npm ci because a package-lock exists"
          npm ci
          npm run prebuild:${{ inputs.APP_ENV }} || true
        else
          echo "No lockfile found — running npm install (best effort)"
          npm install
          npm run prebuild:${{ inputs.APP_ENV }} || true
        fi
      env:
        EXPO_NO_DOTENV: '1'
        APP_ENV: ${{ inputs.APP_ENV }}
        CI: 'true'

    - name: Generate Test APK
      shell: bash
      run: |
        set -euo pipefail
        ANDROID_DIR="$GITHUB_WORKSPACE/delivra/android"
        mkdir -p "$ANDROID_DIR"
        cd "$ANDROID_DIR"
        chmod +x ./gradlew
        # ensure workspace log path exists and create an empty file
        : > "$GITHUB_WORKSPACE/delivra/android/gradle-build.log"
        ./gradlew assembleRelease --no-daemon 2>&1 | tee -a "$GITHUB_WORKSPACE/delivra/android/gradle-build.log"
      env:
        EXPO_NO_DOTENV: '1'
        APP_ENV: ${{ inputs.APP_ENV }}
        CI: 'true'
